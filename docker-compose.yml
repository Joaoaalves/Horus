services:
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: api
    environment:
      ASPNETCORE_ENVIRONMENT: Production
    env_file:
      - .env
    restart: always
    ports:
      - "${API_PORT}:8080"
    volumes:
      - ./backend/:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - internal
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    container_name: client
    working_dir: /app
    ports:
      - "${CLIENT_PORT}:3000"
    depends_on:
      api:
        condition: service_started
    networks:
      - internal
  postgres:
    container_name: postgres
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - internal
  rabbitmq:
    image: rabbitmq:3-management
    container_name: "${RABBITMQ_HOST}"
    ports:
      - "15672:15672" # Management dashboard
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - internal
    volumes:
      - ./certs:/certs:ro
  redis:
    image: redis:7-alpine
    container_name: "${REDIS_HOST}"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal
volumes:
  rabbitmq_data:
  postgres_data:
  client_data:

networks:
  internal:
    driver: bridge
